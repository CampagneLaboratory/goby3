// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Reads.proto

package edu.cornell.med.icb.goby.reads;

public final class Reads {
  private Reads() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ReadCollectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:goby.ReadCollection)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    java.util.List<edu.cornell.med.icb.goby.reads.Reads.ReadEntry> 
        getReadsList();
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    edu.cornell.med.icb.goby.reads.Reads.ReadEntry getReads(int index);
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    int getReadsCount();
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    java.util.List<? extends edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder> 
        getReadsOrBuilderList();
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder getReadsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code goby.ReadCollection}
   */
  public static final class ReadCollection extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:goby.ReadCollection)
      ReadCollectionOrBuilder {
    // Use ReadCollection.newBuilder() to construct.
    private ReadCollection(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReadCollection(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReadCollection defaultInstance;
    public static ReadCollection getDefaultInstance() {
      return defaultInstance;
    }

    public ReadCollection getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReadCollection(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                reads_ = new java.util.ArrayList<edu.cornell.med.icb.goby.reads.Reads.ReadEntry>();
                mutable_bitField0_ |= 0x00000001;
              }
              reads_.add(input.readMessage(edu.cornell.med.icb.goby.reads.Reads.ReadEntry.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          reads_ = java.util.Collections.unmodifiableList(reads_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadCollection_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadCollection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.cornell.med.icb.goby.reads.Reads.ReadCollection.class, edu.cornell.med.icb.goby.reads.Reads.ReadCollection.Builder.class);
    }

    public static com.google.protobuf.Parser<ReadCollection> PARSER =
        new com.google.protobuf.AbstractParser<ReadCollection>() {
      public ReadCollection parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReadCollection(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReadCollection> getParserForType() {
      return PARSER;
    }

    public static final int READS_FIELD_NUMBER = 1;
    private java.util.List<edu.cornell.med.icb.goby.reads.Reads.ReadEntry> reads_;
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    public java.util.List<edu.cornell.med.icb.goby.reads.Reads.ReadEntry> getReadsList() {
      return reads_;
    }
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    public java.util.List<? extends edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder> 
        getReadsOrBuilderList() {
      return reads_;
    }
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    public int getReadsCount() {
      return reads_.size();
    }
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    public edu.cornell.med.icb.goby.reads.Reads.ReadEntry getReads(int index) {
      return reads_.get(index);
    }
    /**
     * <code>repeated .goby.ReadEntry reads = 1;</code>
     */
    public edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder getReadsOrBuilder(
        int index) {
      return reads_.get(index);
    }

    private void initFields() {
      reads_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getReadsCount(); i++) {
        if (!getReads(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < reads_.size(); i++) {
        output.writeMessage(1, reads_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < reads_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, reads_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadCollection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.cornell.med.icb.goby.reads.Reads.ReadCollection prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code goby.ReadCollection}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:goby.ReadCollection)
        edu.cornell.med.icb.goby.reads.Reads.ReadCollectionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadCollection_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadCollection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.cornell.med.icb.goby.reads.Reads.ReadCollection.class, edu.cornell.med.icb.goby.reads.Reads.ReadCollection.Builder.class);
      }

      // Construct using edu.cornell.med.icb.goby.reads.Reads.ReadCollection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getReadsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (readsBuilder_ == null) {
          reads_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          readsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadCollection_descriptor;
      }

      public edu.cornell.med.icb.goby.reads.Reads.ReadCollection getDefaultInstanceForType() {
        return edu.cornell.med.icb.goby.reads.Reads.ReadCollection.getDefaultInstance();
      }

      public edu.cornell.med.icb.goby.reads.Reads.ReadCollection build() {
        edu.cornell.med.icb.goby.reads.Reads.ReadCollection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.cornell.med.icb.goby.reads.Reads.ReadCollection buildPartial() {
        edu.cornell.med.icb.goby.reads.Reads.ReadCollection result = new edu.cornell.med.icb.goby.reads.Reads.ReadCollection(this);
        int from_bitField0_ = bitField0_;
        if (readsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            reads_ = java.util.Collections.unmodifiableList(reads_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.reads_ = reads_;
        } else {
          result.reads_ = readsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.cornell.med.icb.goby.reads.Reads.ReadCollection) {
          return mergeFrom((edu.cornell.med.icb.goby.reads.Reads.ReadCollection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.cornell.med.icb.goby.reads.Reads.ReadCollection other) {
        if (other == edu.cornell.med.icb.goby.reads.Reads.ReadCollection.getDefaultInstance()) return this;
        if (readsBuilder_ == null) {
          if (!other.reads_.isEmpty()) {
            if (reads_.isEmpty()) {
              reads_ = other.reads_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureReadsIsMutable();
              reads_.addAll(other.reads_);
            }
            onChanged();
          }
        } else {
          if (!other.reads_.isEmpty()) {
            if (readsBuilder_.isEmpty()) {
              readsBuilder_.dispose();
              readsBuilder_ = null;
              reads_ = other.reads_;
              bitField0_ = (bitField0_ & ~0x00000001);
              readsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getReadsFieldBuilder() : null;
            } else {
              readsBuilder_.addAllMessages(other.reads_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getReadsCount(); i++) {
          if (!getReads(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.cornell.med.icb.goby.reads.Reads.ReadCollection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.cornell.med.icb.goby.reads.Reads.ReadCollection) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<edu.cornell.med.icb.goby.reads.Reads.ReadEntry> reads_ =
        java.util.Collections.emptyList();
      private void ensureReadsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          reads_ = new java.util.ArrayList<edu.cornell.med.icb.goby.reads.Reads.ReadEntry>(reads_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.cornell.med.icb.goby.reads.Reads.ReadEntry, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder, edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder> readsBuilder_;

      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public java.util.List<edu.cornell.med.icb.goby.reads.Reads.ReadEntry> getReadsList() {
        if (readsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(reads_);
        } else {
          return readsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public int getReadsCount() {
        if (readsBuilder_ == null) {
          return reads_.size();
        } else {
          return readsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public edu.cornell.med.icb.goby.reads.Reads.ReadEntry getReads(int index) {
        if (readsBuilder_ == null) {
          return reads_.get(index);
        } else {
          return readsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder setReads(
          int index, edu.cornell.med.icb.goby.reads.Reads.ReadEntry value) {
        if (readsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureReadsIsMutable();
          reads_.set(index, value);
          onChanged();
        } else {
          readsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder setReads(
          int index, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder builderForValue) {
        if (readsBuilder_ == null) {
          ensureReadsIsMutable();
          reads_.set(index, builderForValue.build());
          onChanged();
        } else {
          readsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder addReads(edu.cornell.med.icb.goby.reads.Reads.ReadEntry value) {
        if (readsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureReadsIsMutable();
          reads_.add(value);
          onChanged();
        } else {
          readsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder addReads(
          int index, edu.cornell.med.icb.goby.reads.Reads.ReadEntry value) {
        if (readsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureReadsIsMutable();
          reads_.add(index, value);
          onChanged();
        } else {
          readsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder addReads(
          edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder builderForValue) {
        if (readsBuilder_ == null) {
          ensureReadsIsMutable();
          reads_.add(builderForValue.build());
          onChanged();
        } else {
          readsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder addReads(
          int index, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder builderForValue) {
        if (readsBuilder_ == null) {
          ensureReadsIsMutable();
          reads_.add(index, builderForValue.build());
          onChanged();
        } else {
          readsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder addAllReads(
          java.lang.Iterable<? extends edu.cornell.med.icb.goby.reads.Reads.ReadEntry> values) {
        if (readsBuilder_ == null) {
          ensureReadsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, reads_);
          onChanged();
        } else {
          readsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder clearReads() {
        if (readsBuilder_ == null) {
          reads_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          readsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public Builder removeReads(int index) {
        if (readsBuilder_ == null) {
          ensureReadsIsMutable();
          reads_.remove(index);
          onChanged();
        } else {
          readsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder getReadsBuilder(
          int index) {
        return getReadsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder getReadsOrBuilder(
          int index) {
        if (readsBuilder_ == null) {
          return reads_.get(index);  } else {
          return readsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public java.util.List<? extends edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder> 
           getReadsOrBuilderList() {
        if (readsBuilder_ != null) {
          return readsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(reads_);
        }
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder addReadsBuilder() {
        return getReadsFieldBuilder().addBuilder(
            edu.cornell.med.icb.goby.reads.Reads.ReadEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder addReadsBuilder(
          int index) {
        return getReadsFieldBuilder().addBuilder(
            index, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .goby.ReadEntry reads = 1;</code>
       */
      public java.util.List<edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder> 
           getReadsBuilderList() {
        return getReadsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.cornell.med.icb.goby.reads.Reads.ReadEntry, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder, edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder> 
          getReadsFieldBuilder() {
        if (readsBuilder_ == null) {
          readsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.cornell.med.icb.goby.reads.Reads.ReadEntry, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder, edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder>(
                  reads_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          reads_ = null;
        }
        return readsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:goby.ReadCollection)
    }

    static {
      defaultInstance = new ReadCollection(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:goby.ReadCollection)
  }

  public interface ReadEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:goby.ReadEntry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 read_index = 1;</code>
     *
     * <pre>
     *Index of a read.
     * </pre>
     */
    boolean hasReadIndex();
    /**
     * <code>required uint32 read_index = 1;</code>
     *
     * <pre>
     *Index of a read.
     * </pre>
     */
    int getReadIndex();

    /**
     * <code>optional uint32 barcode_index = 10;</code>
     *
     * <pre>
     *Index of the barcode, if any.
     * </pre>
     */
    boolean hasBarcodeIndex();
    /**
     * <code>optional uint32 barcode_index = 10;</code>
     *
     * <pre>
     *Index of the barcode, if any.
     * </pre>
     */
    int getBarcodeIndex();

    /**
     * <code>optional string read_identifier = 23;</code>
     *
     * <pre>
     *Read identifier/name may be present.
     * </pre>
     */
    boolean hasReadIdentifier();
    /**
     * <code>optional string read_identifier = 23;</code>
     *
     * <pre>
     *Read identifier/name may be present.
     * </pre>
     */
    java.lang.String getReadIdentifier();
    /**
     * <code>optional string read_identifier = 23;</code>
     *
     * <pre>
     *Read identifier/name may be present.
     * </pre>
     */
    com.google.protobuf.ByteString
        getReadIdentifierBytes();

    /**
     * <code>optional string description = 22;</code>
     *
     * <pre>
     *Additional description about the read (from Fasta/Q format).
     * </pre>
     */
    boolean hasDescription();
    /**
     * <code>optional string description = 22;</code>
     *
     * <pre>
     *Additional description about the read (from Fasta/Q format).
     * </pre>
     */
    java.lang.String getDescription();
    /**
     * <code>optional string description = 22;</code>
     *
     * <pre>
     *Additional description about the read (from Fasta/Q format).
     * </pre>
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <code>required uint32 read_length = 2;</code>
     *
     * <pre>
     *Length of the sequence.
     * </pre>
     */
    boolean hasReadLength();
    /**
     * <code>required uint32 read_length = 2;</code>
     *
     * <pre>
     *Length of the sequence.
     * </pre>
     */
    int getReadLength();

    /**
     * <code>optional bytes sequence = 3;</code>
     *
     * <pre>
     *Sequence, encoded as ascii characters stored in single bytes.
     * </pre>
     */
    boolean hasSequence();
    /**
     * <code>optional bytes sequence = 3;</code>
     *
     * <pre>
     *Sequence, encoded as ascii characters stored in single bytes.
     * </pre>
     */
    com.google.protobuf.ByteString getSequence();

    /**
     * <code>optional bytes sequence_pair = 5;</code>
     *
     * <pre>
     *The second sequence in a pair. Stored the same way as the sequence attribute.
     * </pre>
     */
    boolean hasSequencePair();
    /**
     * <code>optional bytes sequence_pair = 5;</code>
     *
     * <pre>
     *The second sequence in a pair. Stored the same way as the sequence attribute.
     * </pre>
     */
    com.google.protobuf.ByteString getSequencePair();

    /**
     * <code>optional uint32 read_length_pair = 6;</code>
     *
     * <pre>
     *Length of the second sequence in a pair.
     * </pre>
     */
    boolean hasReadLengthPair();
    /**
     * <code>optional uint32 read_length_pair = 6;</code>
     *
     * <pre>
     *Length of the second sequence in a pair.
     * </pre>
     */
    int getReadLengthPair();

    /**
     * <code>optional bytes quality_scores = 4;</code>
     *
     * <pre>
     *Quality scores in Phred units, stored as single bytes (0-255).
     * </pre>
     */
    boolean hasQualityScores();
    /**
     * <code>optional bytes quality_scores = 4;</code>
     *
     * <pre>
     *Quality scores in Phred units, stored as single bytes (0-255).
     * </pre>
     */
    com.google.protobuf.ByteString getQualityScores();

    /**
     * <code>optional bytes quality_scores_pair = 7;</code>
     *
     * <pre>
     *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
     * </pre>
     */
    boolean hasQualityScoresPair();
    /**
     * <code>optional bytes quality_scores_pair = 7;</code>
     *
     * <pre>
     *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
     * </pre>
     */
    com.google.protobuf.ByteString getQualityScoresPair();

    /**
     * <code>optional bytes compressed_data = 8;</code>
     *
     * <pre>
     *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
     *content compressed with the codec.
     * </pre>
     */
    boolean hasCompressedData();
    /**
     * <code>optional bytes compressed_data = 8;</code>
     *
     * <pre>
     *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
     *content compressed with the codec.
     * </pre>
     */
    com.google.protobuf.ByteString getCompressedData();

    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    java.util.List<edu.cornell.med.icb.goby.reads.Reads.MetaData> 
        getMetaDataList();
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    edu.cornell.med.icb.goby.reads.Reads.MetaData getMetaData(int index);
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    int getMetaDataCount();
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    java.util.List<? extends edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder> 
        getMetaDataOrBuilderList();
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder getMetaDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code goby.ReadEntry}
   */
  public static final class ReadEntry extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:goby.ReadEntry)
      ReadEntryOrBuilder {
    // Use ReadEntry.newBuilder() to construct.
    private ReadEntry(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReadEntry(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReadEntry defaultInstance;
    public static ReadEntry getDefaultInstance() {
      return defaultInstance;
    }

    public ReadEntry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReadEntry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              readIndex_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000010;
              readLength_ = input.readUInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000020;
              sequence_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000100;
              qualityScores_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000040;
              sequencePair_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000080;
              readLengthPair_ = input.readUInt32();
              break;
            }
            case 58: {
              bitField0_ |= 0x00000200;
              qualityScoresPair_ = input.readBytes();
              break;
            }
            case 66: {
              bitField0_ |= 0x00000400;
              compressedData_ = input.readBytes();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000002;
              barcodeIndex_ = input.readUInt32();
              break;
            }
            case 178: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              description_ = bs;
              break;
            }
            case 186: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              readIdentifier_ = bs;
              break;
            }
            case 202: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                metaData_ = new java.util.ArrayList<edu.cornell.med.icb.goby.reads.Reads.MetaData>();
                mutable_bitField0_ |= 0x00000800;
              }
              metaData_.add(input.readMessage(edu.cornell.med.icb.goby.reads.Reads.MetaData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          metaData_ = java.util.Collections.unmodifiableList(metaData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadEntry_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.cornell.med.icb.goby.reads.Reads.ReadEntry.class, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder.class);
    }

    public static com.google.protobuf.Parser<ReadEntry> PARSER =
        new com.google.protobuf.AbstractParser<ReadEntry>() {
      public ReadEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReadEntry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReadEntry> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int READ_INDEX_FIELD_NUMBER = 1;
    private int readIndex_;
    /**
     * <code>required uint32 read_index = 1;</code>
     *
     * <pre>
     *Index of a read.
     * </pre>
     */
    public boolean hasReadIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 read_index = 1;</code>
     *
     * <pre>
     *Index of a read.
     * </pre>
     */
    public int getReadIndex() {
      return readIndex_;
    }

    public static final int BARCODE_INDEX_FIELD_NUMBER = 10;
    private int barcodeIndex_;
    /**
     * <code>optional uint32 barcode_index = 10;</code>
     *
     * <pre>
     *Index of the barcode, if any.
     * </pre>
     */
    public boolean hasBarcodeIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 barcode_index = 10;</code>
     *
     * <pre>
     *Index of the barcode, if any.
     * </pre>
     */
    public int getBarcodeIndex() {
      return barcodeIndex_;
    }

    public static final int READ_IDENTIFIER_FIELD_NUMBER = 23;
    private java.lang.Object readIdentifier_;
    /**
     * <code>optional string read_identifier = 23;</code>
     *
     * <pre>
     *Read identifier/name may be present.
     * </pre>
     */
    public boolean hasReadIdentifier() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string read_identifier = 23;</code>
     *
     * <pre>
     *Read identifier/name may be present.
     * </pre>
     */
    public java.lang.String getReadIdentifier() {
      java.lang.Object ref = readIdentifier_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          readIdentifier_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string read_identifier = 23;</code>
     *
     * <pre>
     *Read identifier/name may be present.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getReadIdentifierBytes() {
      java.lang.Object ref = readIdentifier_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        readIdentifier_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 22;
    private java.lang.Object description_;
    /**
     * <code>optional string description = 22;</code>
     *
     * <pre>
     *Additional description about the read (from Fasta/Q format).
     * </pre>
     */
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string description = 22;</code>
     *
     * <pre>
     *Additional description about the read (from Fasta/Q format).
     * </pre>
     */
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          description_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string description = 22;</code>
     *
     * <pre>
     *Additional description about the read (from Fasta/Q format).
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int READ_LENGTH_FIELD_NUMBER = 2;
    private int readLength_;
    /**
     * <code>required uint32 read_length = 2;</code>
     *
     * <pre>
     *Length of the sequence.
     * </pre>
     */
    public boolean hasReadLength() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 read_length = 2;</code>
     *
     * <pre>
     *Length of the sequence.
     * </pre>
     */
    public int getReadLength() {
      return readLength_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString sequence_;
    /**
     * <code>optional bytes sequence = 3;</code>
     *
     * <pre>
     *Sequence, encoded as ascii characters stored in single bytes.
     * </pre>
     */
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes sequence = 3;</code>
     *
     * <pre>
     *Sequence, encoded as ascii characters stored in single bytes.
     * </pre>
     */
    public com.google.protobuf.ByteString getSequence() {
      return sequence_;
    }

    public static final int SEQUENCE_PAIR_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString sequencePair_;
    /**
     * <code>optional bytes sequence_pair = 5;</code>
     *
     * <pre>
     *The second sequence in a pair. Stored the same way as the sequence attribute.
     * </pre>
     */
    public boolean hasSequencePair() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bytes sequence_pair = 5;</code>
     *
     * <pre>
     *The second sequence in a pair. Stored the same way as the sequence attribute.
     * </pre>
     */
    public com.google.protobuf.ByteString getSequencePair() {
      return sequencePair_;
    }

    public static final int READ_LENGTH_PAIR_FIELD_NUMBER = 6;
    private int readLengthPair_;
    /**
     * <code>optional uint32 read_length_pair = 6;</code>
     *
     * <pre>
     *Length of the second sequence in a pair.
     * </pre>
     */
    public boolean hasReadLengthPair() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 read_length_pair = 6;</code>
     *
     * <pre>
     *Length of the second sequence in a pair.
     * </pre>
     */
    public int getReadLengthPair() {
      return readLengthPair_;
    }

    public static final int QUALITY_SCORES_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString qualityScores_;
    /**
     * <code>optional bytes quality_scores = 4;</code>
     *
     * <pre>
     *Quality scores in Phred units, stored as single bytes (0-255).
     * </pre>
     */
    public boolean hasQualityScores() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bytes quality_scores = 4;</code>
     *
     * <pre>
     *Quality scores in Phred units, stored as single bytes (0-255).
     * </pre>
     */
    public com.google.protobuf.ByteString getQualityScores() {
      return qualityScores_;
    }

    public static final int QUALITY_SCORES_PAIR_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString qualityScoresPair_;
    /**
     * <code>optional bytes quality_scores_pair = 7;</code>
     *
     * <pre>
     *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
     * </pre>
     */
    public boolean hasQualityScoresPair() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bytes quality_scores_pair = 7;</code>
     *
     * <pre>
     *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
     * </pre>
     */
    public com.google.protobuf.ByteString getQualityScoresPair() {
      return qualityScoresPair_;
    }

    public static final int COMPRESSED_DATA_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString compressedData_;
    /**
     * <code>optional bytes compressed_data = 8;</code>
     *
     * <pre>
     *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
     *content compressed with the codec.
     * </pre>
     */
    public boolean hasCompressedData() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bytes compressed_data = 8;</code>
     *
     * <pre>
     *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
     *content compressed with the codec.
     * </pre>
     */
    public com.google.protobuf.ByteString getCompressedData() {
      return compressedData_;
    }

    public static final int META_DATA_FIELD_NUMBER = 25;
    private java.util.List<edu.cornell.med.icb.goby.reads.Reads.MetaData> metaData_;
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    public java.util.List<edu.cornell.med.icb.goby.reads.Reads.MetaData> getMetaDataList() {
      return metaData_;
    }
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    public java.util.List<? extends edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder> 
        getMetaDataOrBuilderList() {
      return metaData_;
    }
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    public int getMetaDataCount() {
      return metaData_.size();
    }
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    public edu.cornell.med.icb.goby.reads.Reads.MetaData getMetaData(int index) {
      return metaData_.get(index);
    }
    /**
     * <code>repeated .goby.MetaData meta_data = 25;</code>
     *
     * <pre>
     *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
     *read collection, with the understanding that the meta-data applies to all the reads in the
     *collection. Meta-data can be used to store information about when the sample was sequenced,
     *or other information of interest. The key-value pair format is sufficiently flexible to
     *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
     *keys so that automated tools can use metadata in relatively standard way. Please note that
     *some keys provide a format for the value. This format should also be followed to garantee
     *that meta data can be used computationally in fully automatic manner.
     *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
     *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
     *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
     *Illumina GaIIx
     *Illumina HiSeq 1000
     *Illumina HiSeq 2000
     *Helicos Heliscope
     *LifeTech 5500 SOLiD
     *LifeTech 5500xl SOLiD
     *Roche 454 GS FLX Ti
     *key="organism" value="species name"
     *Since Goby 1.9.1
     * </pre>
     */
    public edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder getMetaDataOrBuilder(
        int index) {
      return metaData_.get(index);
    }

    private void initFields() {
      readIndex_ = 0;
      barcodeIndex_ = 0;
      readIdentifier_ = "";
      description_ = "";
      readLength_ = 0;
      sequence_ = com.google.protobuf.ByteString.EMPTY;
      sequencePair_ = com.google.protobuf.ByteString.EMPTY;
      readLengthPair_ = 0;
      qualityScores_ = com.google.protobuf.ByteString.EMPTY;
      qualityScoresPair_ = com.google.protobuf.ByteString.EMPTY;
      compressedData_ = com.google.protobuf.ByteString.EMPTY;
      metaData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasReadIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReadLength()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getMetaDataCount(); i++) {
        if (!getMetaData(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, readIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(2, readLength_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(3, sequence_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(4, qualityScores_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(5, sequencePair_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(6, readLengthPair_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(7, qualityScoresPair_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(8, compressedData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(10, barcodeIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(22, getDescriptionBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(23, getReadIdentifierBytes());
      }
      for (int i = 0; i < metaData_.size(); i++) {
        output.writeMessage(25, metaData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, readIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, readLength_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, sequence_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, qualityScores_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, sequencePair_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, readLengthPair_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, qualityScoresPair_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, compressedData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, barcodeIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(22, getDescriptionBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(23, getReadIdentifierBytes());
      }
      for (int i = 0; i < metaData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, metaData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.ReadEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.cornell.med.icb.goby.reads.Reads.ReadEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code goby.ReadEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:goby.ReadEntry)
        edu.cornell.med.icb.goby.reads.Reads.ReadEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadEntry_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.cornell.med.icb.goby.reads.Reads.ReadEntry.class, edu.cornell.med.icb.goby.reads.Reads.ReadEntry.Builder.class);
      }

      // Construct using edu.cornell.med.icb.goby.reads.Reads.ReadEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMetaDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        readIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        barcodeIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        readIdentifier_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        description_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        readLength_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        sequence_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        sequencePair_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        readLengthPair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        qualityScores_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000100);
        qualityScoresPair_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        compressedData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000400);
        if (metaDataBuilder_ == null) {
          metaData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          metaDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_ReadEntry_descriptor;
      }

      public edu.cornell.med.icb.goby.reads.Reads.ReadEntry getDefaultInstanceForType() {
        return edu.cornell.med.icb.goby.reads.Reads.ReadEntry.getDefaultInstance();
      }

      public edu.cornell.med.icb.goby.reads.Reads.ReadEntry build() {
        edu.cornell.med.icb.goby.reads.Reads.ReadEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.cornell.med.icb.goby.reads.Reads.ReadEntry buildPartial() {
        edu.cornell.med.icb.goby.reads.Reads.ReadEntry result = new edu.cornell.med.icb.goby.reads.Reads.ReadEntry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.readIndex_ = readIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.barcodeIndex_ = barcodeIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.readIdentifier_ = readIdentifier_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.description_ = description_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.readLength_ = readLength_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.sequence_ = sequence_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sequencePair_ = sequencePair_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.readLengthPair_ = readLengthPair_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.qualityScores_ = qualityScores_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.qualityScoresPair_ = qualityScoresPair_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.compressedData_ = compressedData_;
        if (metaDataBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            metaData_ = java.util.Collections.unmodifiableList(metaData_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.metaData_ = metaData_;
        } else {
          result.metaData_ = metaDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.cornell.med.icb.goby.reads.Reads.ReadEntry) {
          return mergeFrom((edu.cornell.med.icb.goby.reads.Reads.ReadEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.cornell.med.icb.goby.reads.Reads.ReadEntry other) {
        if (other == edu.cornell.med.icb.goby.reads.Reads.ReadEntry.getDefaultInstance()) return this;
        if (other.hasReadIndex()) {
          setReadIndex(other.getReadIndex());
        }
        if (other.hasBarcodeIndex()) {
          setBarcodeIndex(other.getBarcodeIndex());
        }
        if (other.hasReadIdentifier()) {
          bitField0_ |= 0x00000004;
          readIdentifier_ = other.readIdentifier_;
          onChanged();
        }
        if (other.hasDescription()) {
          bitField0_ |= 0x00000008;
          description_ = other.description_;
          onChanged();
        }
        if (other.hasReadLength()) {
          setReadLength(other.getReadLength());
        }
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        if (other.hasSequencePair()) {
          setSequencePair(other.getSequencePair());
        }
        if (other.hasReadLengthPair()) {
          setReadLengthPair(other.getReadLengthPair());
        }
        if (other.hasQualityScores()) {
          setQualityScores(other.getQualityScores());
        }
        if (other.hasQualityScoresPair()) {
          setQualityScoresPair(other.getQualityScoresPair());
        }
        if (other.hasCompressedData()) {
          setCompressedData(other.getCompressedData());
        }
        if (metaDataBuilder_ == null) {
          if (!other.metaData_.isEmpty()) {
            if (metaData_.isEmpty()) {
              metaData_ = other.metaData_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureMetaDataIsMutable();
              metaData_.addAll(other.metaData_);
            }
            onChanged();
          }
        } else {
          if (!other.metaData_.isEmpty()) {
            if (metaDataBuilder_.isEmpty()) {
              metaDataBuilder_.dispose();
              metaDataBuilder_ = null;
              metaData_ = other.metaData_;
              bitField0_ = (bitField0_ & ~0x00000800);
              metaDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMetaDataFieldBuilder() : null;
            } else {
              metaDataBuilder_.addAllMessages(other.metaData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasReadIndex()) {
          
          return false;
        }
        if (!hasReadLength()) {
          
          return false;
        }
        for (int i = 0; i < getMetaDataCount(); i++) {
          if (!getMetaData(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.cornell.med.icb.goby.reads.Reads.ReadEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.cornell.med.icb.goby.reads.Reads.ReadEntry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int readIndex_ ;
      /**
       * <code>required uint32 read_index = 1;</code>
       *
       * <pre>
       *Index of a read.
       * </pre>
       */
      public boolean hasReadIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 read_index = 1;</code>
       *
       * <pre>
       *Index of a read.
       * </pre>
       */
      public int getReadIndex() {
        return readIndex_;
      }
      /**
       * <code>required uint32 read_index = 1;</code>
       *
       * <pre>
       *Index of a read.
       * </pre>
       */
      public Builder setReadIndex(int value) {
        bitField0_ |= 0x00000001;
        readIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 read_index = 1;</code>
       *
       * <pre>
       *Index of a read.
       * </pre>
       */
      public Builder clearReadIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        readIndex_ = 0;
        onChanged();
        return this;
      }

      private int barcodeIndex_ ;
      /**
       * <code>optional uint32 barcode_index = 10;</code>
       *
       * <pre>
       *Index of the barcode, if any.
       * </pre>
       */
      public boolean hasBarcodeIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 barcode_index = 10;</code>
       *
       * <pre>
       *Index of the barcode, if any.
       * </pre>
       */
      public int getBarcodeIndex() {
        return barcodeIndex_;
      }
      /**
       * <code>optional uint32 barcode_index = 10;</code>
       *
       * <pre>
       *Index of the barcode, if any.
       * </pre>
       */
      public Builder setBarcodeIndex(int value) {
        bitField0_ |= 0x00000002;
        barcodeIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 barcode_index = 10;</code>
       *
       * <pre>
       *Index of the barcode, if any.
       * </pre>
       */
      public Builder clearBarcodeIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        barcodeIndex_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object readIdentifier_ = "";
      /**
       * <code>optional string read_identifier = 23;</code>
       *
       * <pre>
       *Read identifier/name may be present.
       * </pre>
       */
      public boolean hasReadIdentifier() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string read_identifier = 23;</code>
       *
       * <pre>
       *Read identifier/name may be present.
       * </pre>
       */
      public java.lang.String getReadIdentifier() {
        java.lang.Object ref = readIdentifier_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            readIdentifier_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string read_identifier = 23;</code>
       *
       * <pre>
       *Read identifier/name may be present.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getReadIdentifierBytes() {
        java.lang.Object ref = readIdentifier_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          readIdentifier_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string read_identifier = 23;</code>
       *
       * <pre>
       *Read identifier/name may be present.
       * </pre>
       */
      public Builder setReadIdentifier(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        readIdentifier_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string read_identifier = 23;</code>
       *
       * <pre>
       *Read identifier/name may be present.
       * </pre>
       */
      public Builder clearReadIdentifier() {
        bitField0_ = (bitField0_ & ~0x00000004);
        readIdentifier_ = getDefaultInstance().getReadIdentifier();
        onChanged();
        return this;
      }
      /**
       * <code>optional string read_identifier = 23;</code>
       *
       * <pre>
       *Read identifier/name may be present.
       * </pre>
       */
      public Builder setReadIdentifierBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        readIdentifier_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <code>optional string description = 22;</code>
       *
       * <pre>
       *Additional description about the read (from Fasta/Q format).
       * </pre>
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string description = 22;</code>
       *
       * <pre>
       *Additional description about the read (from Fasta/Q format).
       * </pre>
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            description_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string description = 22;</code>
       *
       * <pre>
       *Additional description about the read (from Fasta/Q format).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string description = 22;</code>
       *
       * <pre>
       *Additional description about the read (from Fasta/Q format).
       * </pre>
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        description_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string description = 22;</code>
       *
       * <pre>
       *Additional description about the read (from Fasta/Q format).
       * </pre>
       */
      public Builder clearDescription() {
        bitField0_ = (bitField0_ & ~0x00000008);
        description_ = getDefaultInstance().getDescription();
        onChanged();
        return this;
      }
      /**
       * <code>optional string description = 22;</code>
       *
       * <pre>
       *Additional description about the read (from Fasta/Q format).
       * </pre>
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        description_ = value;
        onChanged();
        return this;
      }

      private int readLength_ ;
      /**
       * <code>required uint32 read_length = 2;</code>
       *
       * <pre>
       *Length of the sequence.
       * </pre>
       */
      public boolean hasReadLength() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 read_length = 2;</code>
       *
       * <pre>
       *Length of the sequence.
       * </pre>
       */
      public int getReadLength() {
        return readLength_;
      }
      /**
       * <code>required uint32 read_length = 2;</code>
       *
       * <pre>
       *Length of the sequence.
       * </pre>
       */
      public Builder setReadLength(int value) {
        bitField0_ |= 0x00000010;
        readLength_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 read_length = 2;</code>
       *
       * <pre>
       *Length of the sequence.
       * </pre>
       */
      public Builder clearReadLength() {
        bitField0_ = (bitField0_ & ~0x00000010);
        readLength_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString sequence_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes sequence = 3;</code>
       *
       * <pre>
       *Sequence, encoded as ascii characters stored in single bytes.
       * </pre>
       */
      public boolean hasSequence() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bytes sequence = 3;</code>
       *
       * <pre>
       *Sequence, encoded as ascii characters stored in single bytes.
       * </pre>
       */
      public com.google.protobuf.ByteString getSequence() {
        return sequence_;
      }
      /**
       * <code>optional bytes sequence = 3;</code>
       *
       * <pre>
       *Sequence, encoded as ascii characters stored in single bytes.
       * </pre>
       */
      public Builder setSequence(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes sequence = 3;</code>
       *
       * <pre>
       *Sequence, encoded as ascii characters stored in single bytes.
       * </pre>
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sequence_ = getDefaultInstance().getSequence();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString sequencePair_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes sequence_pair = 5;</code>
       *
       * <pre>
       *The second sequence in a pair. Stored the same way as the sequence attribute.
       * </pre>
       */
      public boolean hasSequencePair() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bytes sequence_pair = 5;</code>
       *
       * <pre>
       *The second sequence in a pair. Stored the same way as the sequence attribute.
       * </pre>
       */
      public com.google.protobuf.ByteString getSequencePair() {
        return sequencePair_;
      }
      /**
       * <code>optional bytes sequence_pair = 5;</code>
       *
       * <pre>
       *The second sequence in a pair. Stored the same way as the sequence attribute.
       * </pre>
       */
      public Builder setSequencePair(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        sequencePair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes sequence_pair = 5;</code>
       *
       * <pre>
       *The second sequence in a pair. Stored the same way as the sequence attribute.
       * </pre>
       */
      public Builder clearSequencePair() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sequencePair_ = getDefaultInstance().getSequencePair();
        onChanged();
        return this;
      }

      private int readLengthPair_ ;
      /**
       * <code>optional uint32 read_length_pair = 6;</code>
       *
       * <pre>
       *Length of the second sequence in a pair.
       * </pre>
       */
      public boolean hasReadLengthPair() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 read_length_pair = 6;</code>
       *
       * <pre>
       *Length of the second sequence in a pair.
       * </pre>
       */
      public int getReadLengthPair() {
        return readLengthPair_;
      }
      /**
       * <code>optional uint32 read_length_pair = 6;</code>
       *
       * <pre>
       *Length of the second sequence in a pair.
       * </pre>
       */
      public Builder setReadLengthPair(int value) {
        bitField0_ |= 0x00000080;
        readLengthPair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 read_length_pair = 6;</code>
       *
       * <pre>
       *Length of the second sequence in a pair.
       * </pre>
       */
      public Builder clearReadLengthPair() {
        bitField0_ = (bitField0_ & ~0x00000080);
        readLengthPair_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString qualityScores_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes quality_scores = 4;</code>
       *
       * <pre>
       *Quality scores in Phred units, stored as single bytes (0-255).
       * </pre>
       */
      public boolean hasQualityScores() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bytes quality_scores = 4;</code>
       *
       * <pre>
       *Quality scores in Phred units, stored as single bytes (0-255).
       * </pre>
       */
      public com.google.protobuf.ByteString getQualityScores() {
        return qualityScores_;
      }
      /**
       * <code>optional bytes quality_scores = 4;</code>
       *
       * <pre>
       *Quality scores in Phred units, stored as single bytes (0-255).
       * </pre>
       */
      public Builder setQualityScores(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        qualityScores_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes quality_scores = 4;</code>
       *
       * <pre>
       *Quality scores in Phred units, stored as single bytes (0-255).
       * </pre>
       */
      public Builder clearQualityScores() {
        bitField0_ = (bitField0_ & ~0x00000100);
        qualityScores_ = getDefaultInstance().getQualityScores();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString qualityScoresPair_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes quality_scores_pair = 7;</code>
       *
       * <pre>
       *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
       * </pre>
       */
      public boolean hasQualityScoresPair() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bytes quality_scores_pair = 7;</code>
       *
       * <pre>
       *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
       * </pre>
       */
      public com.google.protobuf.ByteString getQualityScoresPair() {
        return qualityScoresPair_;
      }
      /**
       * <code>optional bytes quality_scores_pair = 7;</code>
       *
       * <pre>
       *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
       * </pre>
       */
      public Builder setQualityScoresPair(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        qualityScoresPair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes quality_scores_pair = 7;</code>
       *
       * <pre>
       *Quality scores for the second sequence in a pair. Stored as the 'qualityScores' attribute.
       * </pre>
       */
      public Builder clearQualityScoresPair() {
        bitField0_ = (bitField0_ & ~0x00000200);
        qualityScoresPair_ = getDefaultInstance().getQualityScoresPair();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString compressedData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes compressed_data = 8;</code>
       *
       * <pre>
       *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
       *content compressed with the codec.
       * </pre>
       */
      public boolean hasCompressedData() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bytes compressed_data = 8;</code>
       *
       * <pre>
       *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
       *content compressed with the codec.
       * </pre>
       */
      public com.google.protobuf.ByteString getCompressedData() {
        return compressedData_;
      }
      /**
       * <code>optional bytes compressed_data = 8;</code>
       *
       * <pre>
       *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
       *content compressed with the codec.
       * </pre>
       */
      public Builder setCompressedData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        compressedData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes compressed_data = 8;</code>
       *
       * <pre>
       *Compressed stream of data. The first byte indicates the compression/decompression method (codec). The remaining bytes are
       *content compressed with the codec.
       * </pre>
       */
      public Builder clearCompressedData() {
        bitField0_ = (bitField0_ & ~0x00000400);
        compressedData_ = getDefaultInstance().getCompressedData();
        onChanged();
        return this;
      }

      private java.util.List<edu.cornell.med.icb.goby.reads.Reads.MetaData> metaData_ =
        java.util.Collections.emptyList();
      private void ensureMetaDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          metaData_ = new java.util.ArrayList<edu.cornell.med.icb.goby.reads.Reads.MetaData>(metaData_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.cornell.med.icb.goby.reads.Reads.MetaData, edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder, edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder> metaDataBuilder_;

      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public java.util.List<edu.cornell.med.icb.goby.reads.Reads.MetaData> getMetaDataList() {
        if (metaDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(metaData_);
        } else {
          return metaDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public int getMetaDataCount() {
        if (metaDataBuilder_ == null) {
          return metaData_.size();
        } else {
          return metaDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public edu.cornell.med.icb.goby.reads.Reads.MetaData getMetaData(int index) {
        if (metaDataBuilder_ == null) {
          return metaData_.get(index);
        } else {
          return metaDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder setMetaData(
          int index, edu.cornell.med.icb.goby.reads.Reads.MetaData value) {
        if (metaDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaDataIsMutable();
          metaData_.set(index, value);
          onChanged();
        } else {
          metaDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder setMetaData(
          int index, edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder builderForValue) {
        if (metaDataBuilder_ == null) {
          ensureMetaDataIsMutable();
          metaData_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder addMetaData(edu.cornell.med.icb.goby.reads.Reads.MetaData value) {
        if (metaDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaDataIsMutable();
          metaData_.add(value);
          onChanged();
        } else {
          metaDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder addMetaData(
          int index, edu.cornell.med.icb.goby.reads.Reads.MetaData value) {
        if (metaDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaDataIsMutable();
          metaData_.add(index, value);
          onChanged();
        } else {
          metaDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder addMetaData(
          edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder builderForValue) {
        if (metaDataBuilder_ == null) {
          ensureMetaDataIsMutable();
          metaData_.add(builderForValue.build());
          onChanged();
        } else {
          metaDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder addMetaData(
          int index, edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder builderForValue) {
        if (metaDataBuilder_ == null) {
          ensureMetaDataIsMutable();
          metaData_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder addAllMetaData(
          java.lang.Iterable<? extends edu.cornell.med.icb.goby.reads.Reads.MetaData> values) {
        if (metaDataBuilder_ == null) {
          ensureMetaDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, metaData_);
          onChanged();
        } else {
          metaDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder clearMetaData() {
        if (metaDataBuilder_ == null) {
          metaData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          metaDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public Builder removeMetaData(int index) {
        if (metaDataBuilder_ == null) {
          ensureMetaDataIsMutable();
          metaData_.remove(index);
          onChanged();
        } else {
          metaDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder getMetaDataBuilder(
          int index) {
        return getMetaDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder getMetaDataOrBuilder(
          int index) {
        if (metaDataBuilder_ == null) {
          return metaData_.get(index);  } else {
          return metaDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public java.util.List<? extends edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder> 
           getMetaDataOrBuilderList() {
        if (metaDataBuilder_ != null) {
          return metaDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(metaData_);
        }
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder addMetaDataBuilder() {
        return getMetaDataFieldBuilder().addBuilder(
            edu.cornell.med.icb.goby.reads.Reads.MetaData.getDefaultInstance());
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder addMetaDataBuilder(
          int index) {
        return getMetaDataFieldBuilder().addBuilder(
            index, edu.cornell.med.icb.goby.reads.Reads.MetaData.getDefaultInstance());
      }
      /**
       * <code>repeated .goby.MetaData meta_data = 25;</code>
       *
       * <pre>
       *Stores meta-data about the reads. Typically meta-data is stored in the very first read of a
       *read collection, with the understanding that the meta-data applies to all the reads in the
       *collection. Meta-data can be used to store information about when the sample was sequenced,
       *or other information of interest. The key-value pair format is sufficiently flexible to
       *accomodate a variety of needs. The following keys are pre-defined. Please use pre-defined
       *keys so that automated tools can use metadata in relatively standard way. Please note that
       *some keys provide a format for the value. This format should also be followed to garantee
       *that meta data can be used computationally in fully automatic manner.
       *key="sequencing-run-start-date" value="MM/DD/YYYY" Used to record when the sequencing run
       *was initiated on the instrument. Can be used to detect batch effect in a large set of samples.
       *key="platform" value="&lt;free-text&gt;". Value is free text, but the following terms are pre-defined.
       *Illumina GaIIx
       *Illumina HiSeq 1000
       *Illumina HiSeq 2000
       *Helicos Heliscope
       *LifeTech 5500 SOLiD
       *LifeTech 5500xl SOLiD
       *Roche 454 GS FLX Ti
       *key="organism" value="species name"
       *Since Goby 1.9.1
       * </pre>
       */
      public java.util.List<edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder> 
           getMetaDataBuilderList() {
        return getMetaDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.cornell.med.icb.goby.reads.Reads.MetaData, edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder, edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder> 
          getMetaDataFieldBuilder() {
        if (metaDataBuilder_ == null) {
          metaDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.cornell.med.icb.goby.reads.Reads.MetaData, edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder, edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder>(
                  metaData_,
                  ((bitField0_ & 0x00000800) == 0x00000800),
                  getParentForChildren(),
                  isClean());
          metaData_ = null;
        }
        return metaDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:goby.ReadEntry)
    }

    static {
      defaultInstance = new ReadEntry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:goby.ReadEntry)
  }

  public interface MetaDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:goby.MetaData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string key = 1;</code>
     *
     * <pre>
     *Provides the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    boolean hasKey();
    /**
     * <code>required string key = 1;</code>
     *
     * <pre>
     *Provides the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    java.lang.String getKey();
    /**
     * <code>required string key = 1;</code>
     *
     * <pre>
     *Provides the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    java.lang.String getValue();
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * Protobuf type {@code goby.MetaData}
   *
   * <pre>
   *A message to store a key/value pair and represent metadata about reads.
   *Since Goby 1.9.1
   * </pre>
   */
  public static final class MetaData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:goby.MetaData)
      MetaDataOrBuilder {
    // Use MetaData.newBuilder() to construct.
    private MetaData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MetaData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MetaData defaultInstance;
    public static MetaData getDefaultInstance() {
      return defaultInstance;
    }

    public MetaData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MetaData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              key_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              value_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_MetaData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_MetaData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.cornell.med.icb.goby.reads.Reads.MetaData.class, edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder.class);
    }

    public static com.google.protobuf.Parser<MetaData> PARSER =
        new com.google.protobuf.AbstractParser<MetaData>() {
      public MetaData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MetaData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MetaData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int KEY_FIELD_NUMBER = 1;
    private java.lang.Object key_;
    /**
     * <code>required string key = 1;</code>
     *
     * <pre>
     *Provides the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string key = 1;</code>
     *
     * <pre>
     *Provides the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          key_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string key = 1;</code>
     *
     * <pre>
     *Provides the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private java.lang.Object value_;
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          value_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string value = 2;</code>
     *
     * <pre>
     *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      key_ = "";
      value_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasKey()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getKeyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getValueBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getKeyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getValueBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.cornell.med.icb.goby.reads.Reads.MetaData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.cornell.med.icb.goby.reads.Reads.MetaData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code goby.MetaData}
     *
     * <pre>
     *A message to store a key/value pair and represent metadata about reads.
     *Since Goby 1.9.1
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:goby.MetaData)
        edu.cornell.med.icb.goby.reads.Reads.MetaDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_MetaData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_MetaData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.cornell.med.icb.goby.reads.Reads.MetaData.class, edu.cornell.med.icb.goby.reads.Reads.MetaData.Builder.class);
      }

      // Construct using edu.cornell.med.icb.goby.reads.Reads.MetaData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        key_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.cornell.med.icb.goby.reads.Reads.internal_static_goby_MetaData_descriptor;
      }

      public edu.cornell.med.icb.goby.reads.Reads.MetaData getDefaultInstanceForType() {
        return edu.cornell.med.icb.goby.reads.Reads.MetaData.getDefaultInstance();
      }

      public edu.cornell.med.icb.goby.reads.Reads.MetaData build() {
        edu.cornell.med.icb.goby.reads.Reads.MetaData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.cornell.med.icb.goby.reads.Reads.MetaData buildPartial() {
        edu.cornell.med.icb.goby.reads.Reads.MetaData result = new edu.cornell.med.icb.goby.reads.Reads.MetaData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.key_ = key_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.cornell.med.icb.goby.reads.Reads.MetaData) {
          return mergeFrom((edu.cornell.med.icb.goby.reads.Reads.MetaData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.cornell.med.icb.goby.reads.Reads.MetaData other) {
        if (other == edu.cornell.med.icb.goby.reads.Reads.MetaData.getDefaultInstance()) return this;
        if (other.hasKey()) {
          bitField0_ |= 0x00000001;
          key_ = other.key_;
          onChanged();
        }
        if (other.hasValue()) {
          bitField0_ |= 0x00000002;
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasKey()) {
          
          return false;
        }
        if (!hasValue()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.cornell.med.icb.goby.reads.Reads.MetaData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.cornell.med.icb.goby.reads.Reads.MetaData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object key_ = "";
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       *Provides the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       *Provides the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       *Provides the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       *Provides the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       *Provides the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       *Provides the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            value_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <code>required string value = 2;</code>
       *
       * <pre>
       *Describes the value associated with the key. See examples in the documentation of meta_data for ReadEntry.
       * </pre>
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:goby.MetaData)
    }

    static {
      defaultInstance = new MetaData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:goby.MetaData)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_goby_ReadCollection_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_goby_ReadCollection_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_goby_ReadEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_goby_ReadEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_goby_MetaData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_goby_MetaData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Reads.proto\022\004goby\"0\n\016ReadCollection\022\036\n" +
      "\005reads\030\001 \003(\0132\017.goby.ReadEntry\"\255\002\n\tReadEn" +
      "try\022\022\n\nread_index\030\001 \002(\r\022\025\n\rbarcode_index" +
      "\030\n \001(\r\022\027\n\017read_identifier\030\027 \001(\t\022\023\n\013descr" +
      "iption\030\026 \001(\t\022\023\n\013read_length\030\002 \002(\r\022\020\n\010seq" +
      "uence\030\003 \001(\014\022\025\n\rsequence_pair\030\005 \001(\014\022\030\n\020re" +
      "ad_length_pair\030\006 \001(\r\022\026\n\016quality_scores\030\004" +
      " \001(\014\022\033\n\023quality_scores_pair\030\007 \001(\014\022\027\n\017com" +
      "pressed_data\030\010 \001(\014\022!\n\tmeta_data\030\031 \003(\0132\016." +
      "goby.MetaData\"&\n\010MetaData\022\013\n\003key\030\001 \002(\t\022\r",
      "\n\005value\030\002 \002(\tB\"\n\036edu.cornell.med.icb.gob" +
      "y.readsH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_goby_ReadCollection_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_goby_ReadCollection_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_goby_ReadCollection_descriptor,
        new java.lang.String[] { "Reads", });
    internal_static_goby_ReadEntry_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_goby_ReadEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_goby_ReadEntry_descriptor,
        new java.lang.String[] { "ReadIndex", "BarcodeIndex", "ReadIdentifier", "Description", "ReadLength", "Sequence", "SequencePair", "ReadLengthPair", "QualityScores", "QualityScoresPair", "CompressedData", "MetaData", });
    internal_static_goby_MetaData_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_goby_MetaData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_goby_MetaData_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
